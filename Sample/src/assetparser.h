// Class automatically generated by Dev-C++ New Class wizard

#ifndef ASSETPARSER_H
#define ASSETPARSER_H

#include <fstream>
#include <string>
#include <sstream>
#include <map>
#include <vector>

using namespace std;

typedef map<string, vector<string>*> asset_map;

class AssetIterator {
    private:
        vector<string>* asset;
        vector<string>::iterator iter;
        
    public:
        AssetIterator() : asset(NULL) { }
        AssetIterator(vector<string>* _asset) : asset(_asset), iter(_asset->begin()) { }
        bool Next(string& id, string& value);
};

// No description
class AssetParser
{
    public:
        enum AssetType {
            TYPE_FILE,
            TYPE_TEXT,
            TYPE_NUMBER
        };
        
    private:
        asset_map assets;
    
	public:
        // Singleton Instance
        static AssetParser& GetInstance() {
            static AssetParser instance;
            return instance;
        }
        ~AssetParser(); // Reset
		bool LoadAssetPackFile(string filename);
        bool IsTypeExsits(string type);
        AssetIterator GetAsset(string type);
		
    protected:
        bool ValidateFileExists(string filename);
        bool ValidateAssetPackFile(string filename);
        void InsertNewAssetType(string type);
        vector<string>* GetAssetVector(string type);
        
    private:
        AssetParser();
        
};

#endif // ASSETPARSER_H
