// Class automatically generated by Dev-C++ New Class wizard

#include "scene.h" // class's header file

// Static Variables
map<string, Scene*> Scene::sceneMap;
bool Scene::swapFlag = false;
Scene* Scene::nextScene = NULL;

GLAPIClass& Scene::gl = GLAPIClass::GetInstance();
ki::KeyInputAPI& Scene::ki = ki::KeyInputAPI::GetInstance();
EngineAPI& Scene::engine = EngineAPI::GetInstance();

                  
void Scene::InternalOnBegin() { 
    OnBegin();
    masterSceneObject.InternalOnBegin();
}

void Scene::InternalOnEnd() { 
    OnEnd();
    masterSceneObject.InternalOnEnd();
}

void Scene::InternalOnFixedLoading() { 
    OnFixedLoading();
    masterSceneObject.InternalOnFixedLoading();
}

void Scene::InternalOnFixedUpdate() { 
    OnFixedUpdate();
    masterSceneObject.InternalOnFixedUpdate();
}

void Scene::InternalOnFixedClosing() { 
    OnFixedClosing();
    masterSceneObject.InternalOnFixedClosing();
}

void Scene::InternalOnLoading() { 
    OnLoading();
    masterSceneObject.InternalOnLoading();
}

void Scene::InternalOnUpdate() { 
    OnUpdate();
    masterSceneObject.Draw();
    masterSceneObject.InternalOnUpdate();
}

void Scene::InternalOnClosing() { 
    OnClosing();
    masterSceneObject.InternalOnClosing();
}

bool Scene::ConnectionCheck(SceneObject& obj) { 
    SceneObject* parent = &obj;
    while (parent) {
        parent = parent->GetParent();
        if (parent == &masterSceneObject)
            return true;
    }
    return false;
}

string Scene::RegisterReference(SceneObject& obj, string alias) {
    // Find Reference
    map<string, SceneObject*>::iterator iter;
    for (iter = somap.begin(); iter != somap.end(); iter++)
        if (iter->second == &obj)
            return iter->first; // Reference Already Exists
    
    // Register Reference
    string result = alias;
    iter = somap.find(result);
    while(iter != somap.end()) {
        // Alias already exists
        stringstream ss;
        int inc = 2;
        ss << alias << inc;
        result = ss.str();
        inc++;
        iter = somap.find(result);
    }
    somap.insert(make_pair(result, &obj));
    return result;
}

SceneObject* Scene::FindReference(string alias) const {
    map<string, SceneObject*>::const_iterator iter(somap.find(alias));
    return (iter != somap.end()) ? iter->second : NULL;
}

void Scene::RemoveReference(string alias) {
    map<string, SceneObject*>::iterator iter(somap.find(alias));
    if (iter != somap.end())
        somap.erase(iter);
}
