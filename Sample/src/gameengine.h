// Class automatically generated by Dev-C++ New Class wizard

#ifndef GAMEENGINE_H
#define GAMEENGINE_H

#include <windows.h>
#include "engineapi.h"
#include "scene.h"

using namespace std;
using namespace ki;

// GameEngine Initializer Parameter
struct GameEngineInitializer {
    HINSTANCE hInstance;
    int nCmdShow;
    HWND mainWnd;
    Point2D windowSize;
    string title;
    uint updateDelay;
    uint drawDelay;
    bool keepUpdateOnBackground;
    bool keepDrawOnBackground;
};

// No description
class GameEngine
{
    public:
        enum EngineState {
            FINE                = 0,
            GL_NOT_READY        = (1<<0),
            NO_CURRENT_SCENE    = (1<<1),
            STOPPED             = (1<<2)
        };
        
    protected:
        // Visible API Class
        AssetParser& as;
        
        
    private:
        // Windows components
        HWND mainWnd;
        HDC hdc;
        HGLRC hrc;
        bool isWindowActive;
        int visibleHeight;
        
        // Threading Variables
        HANDLE mutex;
        bool flagExit;
        
        // API classes
        EngineAPI& eg;
        GLAPIClass& gl;
        KeyInputAPI& ki;
        
        // Engine State
        int state;
        string stateString;
        
        // Scene
        Scene* sCurrent;
        
        // Engine Behaviour Variables
        bool keepUpdateOnBackground;
        bool keepDrawOnBackground;
        
	public:
        // Engine Initializer / Destructor / Emergency Stopper
        void Initialize(GameEngineInitializer& param);
        void OnEngineDestruct();
        inline void StopEngine() { PostMessage(mainWnd, WM_CLOSE, 0, 0); }
        
        // Get Engine State
        inline int GetState() { return state; }
        inline string GetStateString() { return stateString; }
        
        // Threading Functions
        inline void SetExitFlag() { flagExit = true; }
        inline bool GetExitFlag() { return flagExit; }
        
        // GameEngine Update Functions
        void FixedUpdate();             // In-game Logic Updater
        void Update();                  // Renderer
        
    protected:
        GameEngine();
        void SetInitialScene(Scene* scene);
        virtual void CustomInitialize() { }
        virtual void CustomOnEngineDestruct() { }
        
    private:
        void UpdateEngineState();
        // TODO: Implement Load Assets
        void LoadAssets();
};

#endif // GAMEENGINE_H
