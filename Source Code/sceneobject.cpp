// Class automatically generated by Dev-C++ New Class wizard

#include "sceneobject.h" // class's header file

uint SceneObject::counter = 0;
GLAPIClass& SceneObject::gl = GLAPIClass::GetInstance();

void SceneObject::SetParent(SceneObject* parent) { 
    if (this->parent)
        this->parent->RemoveChild(this);
    parent->children.push_back(this); 
    this->parent = parent; 
}

void SceneObject::RemoveChild(SceneObject* target) {
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        if (*iter == target) {
            children.erase(iter);
            return;
        }
}

void SceneObject::SetDepth(int depth) {
    this->depth = depth;
    if (parent)
        stable_sort(parent->children.begin(), parent->children.end(), SceneObject::SOComparator);
}

void SceneObject::Draw() {
    // Push Matrix
    gl.PushMatrix();
    
    // Transformation
    gl.Transform(transformation);
    
    // Draw Child Object
    vector<SceneObject*>& children = GetChildrenVector();
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++) {
        (*iter)->Draw();
    }
    
    // Pop Matrix
    gl.PopMatrix();
}

void SceneObject::InternalOnBegin() { 
    OnBegin(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnBegin();
}

void SceneObject::InternalOnEnd() { 
    OnEnd(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnEnd();
}

void SceneObject::InternalOnFixedLoading() { 
    if (!enabled)   return; // Object Disabled
    OnFixedLoading(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnFixedLoading();
}

void SceneObject::InternalOnFixedUpdate() { 
    if (!enabled)   return; // Object Disabled
    OnFixedUpdate();
    if (tickUpdate)
        tick++;
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnFixedUpdate();
}

void SceneObject::InternalOnFixedClosing() { 
    if (!enabled)   return; // Object Disabled
    OnFixedClosing(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnFixedClosing();
}

void SceneObject::InternalOnLoading() { 
    if (!enabled)   return; // Object Disabled
    OnLoading(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnLoading();
}

void SceneObject::InternalOnUpdate() { 
    if (!enabled)   return; // Object Disabled
    OnUpdate();
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnUpdate();
}

void SceneObject::InternalOnClosing() { 
    if (!enabled)   return; // Object Disabled
    OnClosing(); 
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++)
        (*iter)->InternalOnClosing();
}

void SceneObject::Dispose() {
    // Remove this object from parent
    if (parent)
        parent->RemoveChild(this);
        
    // Dispose every child object
    vector<SceneObject*>::iterator iter;
    for (iter = children.begin(); iter != children.end(); iter++) {
        (*iter)->Dispose();
    }
    disposed = true;
    enabled = false;
}
