// Class automatically generated by Dev-C++ New Class wizard

#include "gameenginelauncher.h" // class's header file

const char GameEngineLauncher::szClassName[ ]   = "RPGMakerEngine";
const char GameEngineLauncher::wdTitleText[ ]   = "RPG:ME";
const char GameEngineLauncher::wdAboutTitle[ ]  = "About RPG:ME...";
const char GameEngineLauncher::wdAboutText[ ]   = "RPG Maker Engine...     A.k.a. RPG:ME\n\nDeveloped by 821 THE \"BRYAN\" OH.\n\n\nFREE LICENSED";

bool GameEngineLauncher::launched = false;
GameEngineLauncher* GameEngineLauncher::instance = NULL;

GameEngineLauncher::GameEngineLauncher(GameEngine* instance, GameEngineInitializer init) : engine(*instance) {
    this->param = init;
    this->thread = NULL;
    this->instance = this;
}

int GameEngineLauncher::Launch() {
    if (launched) {
        MessageBox(mainWnd, "GameEngine Already Launched.", "Multiple Engine Launch Warning", 1);
        return 0;
    }
    launched = true;
    return InternalLaunch();
}

LRESULT CALLBACK GameEngineLauncher::EventHandlerEntry(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {
    return instance->EventHandler(hwnd, message, wParam, lParam);
}

DWORD WINAPI GameEngineLauncher::ThreadFixedUpdateEntry(LPVOID lpParam) {
    return instance->ThreadFixedUpdate();
}

LRESULT CALLBACK GameEngineLauncher::EventHandler(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
        case WM_CREATE:
            {
                // Initialize GameEngine
                param.mainWnd = hwnd;
                engine.Initialize(param);
                
                // Check Initilization state
                int state = engine.GetState();
                if (state != GameEngine::FINE) {
                    // Engine is not ready
                    MessageBox(hwnd, engine.GetStateString().c_str(), "Incomplete Engine Init", 0);
                    engine.StopEngine();
                } else {
                    // Start Thread
                    thread = CreateThread(NULL, 0, ThreadFixedUpdateEntry, (LPVOID*) NULL, 0, NULL);
                    SetTimer(hwnd, 1, param.drawDelay / 1000, NULL);
                }
            }
            break;
        
        case WM_TIMER:
            // Call GameEngine Update(Draw call) Loop
            engine.Update();
            break;
            
        case WM_COMMAND:
            break;
            
        case WM_KEYDOWN:
            switch(wParam) {
                // Engine Information
                case VK_F12:
                    MessageBox(NULL, wdAboutText, wdAboutTitle, 0);
                    break;
            }
            break;
        
        case WM_CLOSE:
            // Stop GameEngine
            engine.SetExitFlag();
            WaitForSingleObject(thread, INFINITE);
            engine.OnEngineDestruct();
            
            // Clean Up
            CloseHandle(thread);
            
            // Window Close Clicked
            DestroyWindow(hwnd);
            break;
            
        case WM_DESTROY:
            PostQuitMessage (0);       /* send a WM_QUIT to the message queue */
            break;
            
        default:                      /* for messages that we don't deal with */
            return DefWindowProc (hwnd, message, wParam, lParam);
    }

    return 0;
}

DWORD GameEngineLauncher::ThreadFixedUpdate() {
    LARGE_INTEGER beginTime, endTime;
    LARGE_INTEGER freq;
    unsigned long elapsed, delay;
    
    QueryPerformanceFrequency(&freq);
    while (!engine.GetExitFlag()) {
        QueryPerformanceCounter(&beginTime);
        engine.FixedUpdate();
        QueryPerformanceCounter(&endTime);
        elapsed = (endTime.QuadPart - beginTime.QuadPart) * 1000000 / freq.QuadPart;
        if (param.updateDelay > elapsed) {
            delay = (param.updateDelay - elapsed) / 1000;
            Sleep(delay);
        }
    }
    return 0;
}

int GameEngineLauncher::InternalLaunch() {
    MSG messages;            /* Here messages to the application are saved */
    WNDCLASSEX wincl;        /* Data structure for the windowclass */
    HMENU menu;

    /* The Window structure */
    wincl.hInstance = param.hInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = EventHandlerEntry;         /* This function is called by windows */
    wincl.style = CS_DBLCLKS;                 /* Catch double-clicks */
    wincl.cbSize = sizeof (WNDCLASSEX);

    /* Use default icon and mouse-pointer */
    wincl.hIcon = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor (NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;                 /* No menu */
    wincl.cbClsExtra = 0;                      /* No extra bytes after the window class */
    wincl.cbWndExtra = 0;                      /* structure or the window instance */
    wincl.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH);

    /* Register the window class, and if it fails quit the program */
    if (!RegisterClassEx (&wincl))
        return 0;

    /* The class is registered, let's create the program*/
    mainWnd = CreateWindowEx (
           0,                           /* Extended possibilites for variation */
           szClassName,                 /* Classname */
           param.title.c_str(),         /* Title Text */
           WS_OVERLAPPED | WS_SYSMENU,  /* default window */
           CW_USEDEFAULT,               /* Windows decides the position */
           CW_USEDEFAULT,               /* where the window ends up on the screen */
           param.windowSize.x,          /* The programs width */
           param.windowSize.y,          /* and height in pixels */
           HWND_DESKTOP,                /* The window is a child-window to desktop */
           NULL,                        /* No menu */
           param.hInstance,             /* Program Instance handler */
           NULL                         /* No Window Creation data */
            );

    /* Make the window visible on the screen */
    ShowWindow (mainWnd, param.nCmdShow);
    
    /* Run the message loop. It will run until GetMessage() returns 0 */
    while (GetMessage (&messages, NULL, 0, 0))
    {
        /* Translate virtual-key messages into character messages */
        TranslateMessage(&messages);
        /* Send message to WindowProcedure */
        DispatchMessage(&messages);
    }
    
    /* The program return-value is 0 - The value that PostQuitMessage() gave */
    return messages.wParam;
}
