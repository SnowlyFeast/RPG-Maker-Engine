// Class automatically generated by Dev-C++ New Class wizard

#ifndef GLAPI_H
#define GLAPI_H

#include <windows.h>
#include <gl/glu.h>
#include <gl/glext.h>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include "datatype.h"

using namespace std;

// OpenGL API Implemented Class
class GLAPIClass
{
    public:
    
    private:
        HDC* hdc;
        bool enabled;
        
        TextureStorage texStorage;
        Point2D windowSize;
        Vector2D viewportSize;
        Vector2D unitVertex2f;
        Vector2D centerVertex2f;
        
        uint charset;
    
	public:
        // Singleton Instance
        static GLAPIClass& GetInstance() {
            static GLAPIClass instance;
            return instance;
        }
        
        // Is OpenGL Enabled
        inline bool GetSuccess() { return enabled; }
        
        // OpenGL init/destructor
        void EnableOpenGL(HWND hwnd, HDC* hDC, HGLRC* hRC, Point2D windowSize);
		void DisableOpenGL(HWND hwnd, HDC hDC, HGLRC hRC);
		
		// Miscellaneous
		inline Point2D GetWindowSize() { return windowSize; }
		
		// Texture API
		uint GenerateEmptyTexture (int width, int height, uint RGBA);
		uint LoadTexture          (string filename, TextureGenParam param);
		uint BuildAnimation       (const vector<uint>& uids);
		uint BuildAnimation       (const vector<uint>& uids, const Rect2D& range);
		uint CutTexture           (const uint uid, const Rect2D& range);
		void ClearTexture         (const uint uid, const uint RGBA);
		
		vector<uint> LoadMultipleTextures(string prefix, string suffix, uint digit, TextureGenParam param);
		inline const TextureSource& GetTextureInformation (const uint uid) { return texStorage.Find(uid); }
		
		// Drawing API
		inline void ClearBuffer()     { glClear(GL_COLOR_BUFFER_BIT); }
		inline void SwapBuffer()      { SwapBuffers(*hdc); }
		inline void PushMatrix()      { glPushMatrix(); }
		inline void PopMatrix()       { glPopMatrix(); }
		inline void LoadIdentity()    { glLoadIdentity(); }
		
		// Transformation
		void Transform            (const Transformation& tf);
		void TranslateMasterSO    (const Transformation& tf);
		void DrawTextureAuto      (const Transformation& tf, const uint uid, const ullong frame, const Point2D size);
		
		// Text API
		void LoadCharacterSet     ();
		void DrawString           (const Transformation& tf, const string str, const int count);
		
		// Primitive Drawing API
		void DrawQuadTexture      (const float x1,     const float y1,     const float x2,     const float y2,
                                   const float tex_x1, const float tex_y1, const float tex_x2, const float tex_y2, const GLuint tid);
        
    protected:
        // Pixel to Coord Functions
        Vector2D PxCoordToVertex2f   (const Point2D& pixel);
        Vector2D PxCoordToTexCoord2f (const Point2D& pixel, const uchar power);
        
        // Character Set Texture Position Specifing Function
        bool ValidateChar       (const uint msb, const uint lsb);
        void FindCharTexCoord   (uint msb, uint lsb, Vector2D& lbTex, Vector2D& rtTex);
        
    private:
        // Block Initializer For Singleton Instance
        GLAPIClass() : enabled(false) { };
};

#endif // GLAPI_H
