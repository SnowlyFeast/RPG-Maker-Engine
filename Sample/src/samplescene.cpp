// Class automatically generated by Dev-C++ New Class wizard

#include "samplescene.h" // class's header file

void SampleScene::Initialize() {
    const string TEXTURE_DIR = "./data/textures/";
    
    // Add Scene Reference
    Scene::AddSceneToMap(this, "sample");
    
    // Load Texture
    TextureGenParam param(TextureGenParam::LINEAR, TextureGenParam::LINEAR);
    nts.Add(gl.LoadTexture(TEXTURE_DIR+"page1.bmp", param),         "page1");
    nts.Add(gl.LoadTexture(TEXTURE_DIR+"page2.bmp", param),         "page2");
    nts.Add(gl.LoadTexture(TEXTURE_DIR+"page3.bmp", param),         "page3");
    param = TextureGenParam(TextureGenParam::NEAREST, TextureGenParam::NEAREST);
    nts.Add(gl.LoadTexture(TEXTURE_DIR+"page4.bmp", param),         "page4");
    param = TextureGenParam(TextureGenParam::LINEAR, TextureGenParam::LINEAR);
    nts.Add(gl.LoadTexture(TEXTURE_DIR+"page5.bmp", param),         "page5");
    
    // Load Texture by Asset Parser
    AssetParser& parser = AssetParser::GetInstance();
    parser.LoadAssetPackFile("./data/assets/sample.pak");
    AssetIterator iter = parser.GetAsset("TEXTURE");
    string id, value;
    while (iter.Next(id, value)) {
        nts.Add(gl.LoadTexture(value, param), id);
    }
    
    // Above Asset Parser loading lines are exactly same as below.
    //nts.Add(gl.LoadTexture(TEXTURE_DIR+"test_texture.bmp", param),  "test_tex");
    //nts.Add(gl.LoadTexture(TEXTURE_DIR+"test_tile1.bmp", param),    "tile1");
    //nts.Add(gl.LoadTexture(TEXTURE_DIR+"shork.bmp", param),         "shork");
    
    
    
    // Build Animation Texture
    vector<uint> uids = gl.LoadMultipleTextures(TEXTURE_DIR+"test_anim_", ".bmp", 3, param);
    nts.Add(gl.BuildAnimation(uids), "anim");
    
    // Cut Texture
    uint cutTexId = gl.CutTexture( nts.Find("test_tex"), Rect2D(Point2D(40, 0), Point2D(58, 60)) );
    nts.Add(cutTexId, "cut"); 
    
    // Register Object
    RegisterObject(bg);
    RegisterObject(so1);
    RegisterObject(so2);
    RegisterObject(so3, so2);
    RegisterObject(so4);
    RegisterObject(so5);
    RegisterObject(to);
    
    // Initialize Scene Object
    bg.texture  = nts.Find("page1");
    so1.texture = nts.Find("shork");
    so2.texture = nts.Find("test_tex");
    so3.texture = nts.Find("anim");
    so4.texture = nts.Find("tile1");
    so5.texture = nts.Find("cut");
    
    so1.renderSize = Point2D(100, 100);
    so2.renderSize = Point2D(200, 200);
    so3.renderSize = Point2D(100, 200);
    so4.renderSize = Point2D(10 , 10 );
    so5.renderSize = Point2D(300, 10 );
    
    so1.SetDepth(1);
    so2.SetDepth(2);
    so3.SetDepth(3);
    so4.SetDepth(4);
    so5.SetDepth(5);
    
    to.SetTickPerChar(2);
}

void SampleScene::OnBegin() {
    selected = &so1;
}

void SampleScene::OnEnd() {
    
}

void SampleScene::OnFixedLoading() {
    SceneEndOfLoading();
}

void SampleScene::OnFixedUpdate() {
    CheckTransformationKey();
    CheckObjectSwitchingKey();
    CheckRenderOptionKey();
    CheckEtcKey();
}

void SampleScene::OnFixedClosing() {
    SceneEndOfClosing();
}

void SampleScene::OnLoading() {
    
}

void SampleScene::OnUpdate() {
    
}

void SampleScene::OnClosing() {
    
}


void SampleScene::CheckTransformationKey() {
    // Translate
    KeyState w = ki.GetKeyState(W);
    KeyState a = ki.GetKeyState(A);
    KeyState s = ki.GetKeyState(S);
    KeyState d = ki.GetKeyState(D);
    
    if (w.down)
        selected->transformation.position.y += 3;
    else if (s.down)
        selected->transformation.position.y -= 3;
    if (a.down)
        selected->transformation.position.x -= 3;
    else if (d.down)
        selected->transformation.position.x += 3;
    
    // Rotate
    KeyState q = ki.GetKeyState(Q);
    KeyState e = ki.GetKeyState(E);
    
    if (q.down)
        selected->transformation.rotate += 3.0f;
    else if (e.down)
        selected->transformation.rotate -= 3.0f;
        
    // Scale
    KeyState z = ki.GetKeyState(Z);
    KeyState x = ki.GetKeyState(X);
    KeyState c = ki.GetKeyState(C);
    KeyState v = ki.GetKeyState(V);
    
    if (z.down)
        selected->transformation.scale.x += 0.02f;
    else if (x.down)
        selected->transformation.scale.x -= 0.02f;
    if (c.down)
        selected->transformation.scale.y += 0.02f;
    else if (v.down)
        selected->transformation.scale.y -= 0.02f;
        
    // Reset
    KeyState f = ki.GetKeyState(F);
    
    if (f.control && f.pressed)
        selected->transformation = Transformation();
}

void SampleScene::CheckObjectSwitchingKey() {
    // Switch Object
    KeyState k1 = ki.GetKeyState(KEY1);
    KeyState k2 = ki.GetKeyState(KEY2);
    KeyState k3 = ki.GetKeyState(KEY3);
    KeyState k4 = ki.GetKeyState(KEY4);
    KeyState k5 = ki.GetKeyState(KEY5);
    KeyState k0 = ki.GetKeyState(KEY0);
    
    if (k1.control && k1.pressed)
        selected = &so1;
    else if (k2.control && k2.pressed)
        selected = &so2;
    else if (k3.control && k3.pressed)
        selected = &so3;
    else if (k4.control && k4.pressed)
        selected = &so4;
    else if (k5.control && k5.pressed)
        selected = &so5;
    else if (k0.control && k0.pressed)
        selected = &masterSceneObject;
        
    // Toggle Enable/Disable
    KeyState tab = ki.GetKeyState(TAB);
    if (tab.pressed)
        selected->enabled = !selected->enabled;
        
    // Switch Page
    static int page = 1;
    KeyState enter = ki.GetKeyState(ENTER);
    KeyState bsp   = ki.GetKeyState(BACK);
    if (enter.pressed)  page++;
    else if (bsp.pressed)   page--;
        
    if (enter.pressed || bsp.pressed) {
        // Clip Page
        if (page == 6)  page = 1;
        if (page == 0)  page = 5;
        switch (page) {
            case 1:
                bg.texture = nts.Find("page1");
                break;
            
            case 2:
                bg.texture = nts.Find("page2");
                break;
                
            case 3:
                bg.texture = nts.Find("page3");
                break;
                
            case 4:
                bg.texture = nts.Find("page4");
                break;
                
            case 5:
                bg.texture = nts.Find("page5");
                break;
        }
    }
    
    // Min / Mag Background
    KeyState com = ki.GetKeyState(COMMA);
    KeyState per = ki.GetKeyState(PERIOD);
    if (com.control && com.pressed)
        bg.transformation.scale -= Vector2D(0.1f, 0.1f);
    else if (per.control && per.pressed)
        bg.transformation.scale += Vector2D(0.1f, 0.1f);
}

void SampleScene::CheckRenderOptionKey() {
    // Change Anchor
    KeyState n1 = ki.GetKeyState(NUM1);
    KeyState n3 = ki.GetKeyState(NUM3);
    KeyState n5 = ki.GetKeyState(NUM5);
    KeyState n7 = ki.GetKeyState(NUM7);
    KeyState n9 = ki.GetKeyState(NUM9);
    
    if (n1.pressed)
        selected->transformation.anchor = Anchor::LEFT_BOTTOM;
    else if (n3.pressed)
        selected->transformation.anchor = Anchor::RIGHT_BOTTOM;
    else if (n5.pressed)
        selected->transformation.anchor = Anchor::CENTER;
    else if (n7.pressed)
        selected->transformation.anchor = Anchor::LEFT_TOP;
    else if (n9.pressed)
        selected->transformation.anchor = Anchor::RIGHT_TOP;
    
    // Change Depth
    KeyState t = ki.GetKeyState(T);
    KeyState g = ki.GetKeyState(G);
    
    if (t.pressed)
        selected->SetDepth(selected->GetDepth() + 1);
    else if (g.pressed)
        selected->SetDepth(selected->GetDepth() - 1);
        
    // Toggle Texture Render Option
    KeyState u = ki.GetKeyState(U);
    KeyState i = ki.GetKeyState(I);
    KeyState o = ki.GetKeyState(O);
    KeyState p = ki.GetKeyState(P);
    KeyState bo = ki.GetKeyState(BRACKET_OPEN);
    KeyState bc = ki.GetKeyState(BRACKET_CLOSE);
    
    if (u.pressed) {
        ((RenderObject*)selected)->renderOp |= RenderObject::TEXTURE_SIZE;
        ((RenderObject*)selected)->renderOp &= ~RenderObject::GIVEN_SIZE;
    } else if (i.pressed) {
        ((RenderObject*)selected)->renderOp &= ~RenderObject::TEXTURE_SIZE;
        ((RenderObject*)selected)->renderOp |= RenderObject::GIVEN_SIZE;
    } else if (o.pressed)
        ((RenderObject*)selected)->renderOp ^= RenderObject::STRETCH_HOR;
    else if (p.pressed)
        ((RenderObject*)selected)->renderOp ^= RenderObject::STRETCH_VER;
    else if (bo.pressed)
        ((RenderObject*)selected)->renderOp ^= RenderObject::FIT_TO_SCREEN;
    else if (bc.pressed)
        ((RenderObject*)selected)->renderOp ^= RenderObject::FIT_TO_SCREEN_KEEP_RATIO;
        
}


void SampleScene::CheckEtcKey() {
    // Text Object
    KeyState lmb = ki.GetKeyState(LMB);
    KeyState rmb = ki.GetKeyState(RMB);
    KeyState mmb = ki.GetKeyState(MMB);
    
    if (lmb.pressed) {
        to.transformation.position = ki.GetCursorPos();
        stringstream ss;
        ss << "(" << to.transformation.position.x << ", " << to.transformation.position.y << ")";
        to.SetText(ss.str());
        to.BeginDisplay();
    }
    
    if (rmb.pressed) {
        to.SetText("한글도 됩니다. 맞춤법 파괴 문자는 안됩니다.");
        to.BeginDisplay();
    }
    
    if (mmb.pressed) 
        to.ForceEnd();
    
    // Quit
    KeyState esc = ki.GetKeyState(ESC);
    if (esc.pressed)
        engine.StopEngine();
        
    // Swap Scene
    KeyState h = ki.GetKeyState(H);
    if (h.control && h.shift && h.pressed) {
        QueueSceneSwap("game");
        SceneEndOfUpdate();
    }
}
        
