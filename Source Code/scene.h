// Class automatically generated by Dev-C++ New Class wizard

#ifndef SCENE_H
#define SCENE_H

#include "mastersceneobject.h"
#include "renderobject.h"
#include "textobject.h"
#include "engineapi.h"

// No description
class Scene : public IUpdatable
{
    ///////////////////////////////////////////////////////////////////
    /////////          Static Member Declaration               ////////
    ///////////////////////////////////////////////////////////////////
    protected:
        // Scene Swapping Tools
        static map<string, Scene*> sceneMap;
        static bool swapFlag;
        static Scene* nextScene;
        
        static void AddSceneToMap(Scene* scene, string alias) { sceneMap.insert(make_pair(alias, scene)); }
        static Scene* GetScene(string alias) {
            map<string, Scene*>::iterator iter(sceneMap.find(alias));
            return ( iter != sceneMap.end() ) ? iter->second : NULL;
        }
        static void QueueSceneSwap(string alias) {
            Scene* next = GetScene(alias);
            if (next == NULL)   return;
            swapFlag = true;
            nextScene = next;
        }
        // APIs
        static GLAPIClass& gl;
        static ki::KeyInputAPI& ki;
        static EngineAPI& engine;

    public:
        static inline bool      GetSwapFlag()   { return swapFlag; }
        static inline Scene*    GetNextScene()  { return nextScene; }
        static inline void      ResetSwapFlag() { swapFlag = false; }
        
    
        
    ///////////////////////////////////////////////////////////////////
    /////////        Non-Static Member Declaration             ////////
    ///////////////////////////////////////////////////////////////////
    public:
        enum SceneState {
            BEGIN,
            LOADING,
            UPDATE,
            CLOSING,
            END
        };
        
    protected:
        SceneState state;
        Transformation& transformation;
        MasterSceneObject masterSceneObject;
        map<string, SceneObject*> somap;
    
	public:
        Scene() : state(BEGIN), transformation(masterSceneObject.transformation) { }
    
		// Scene State Control
		inline SceneState GetSceneState() { return state; }
		inline void SetSceneState(SceneState _state) { state = _state; }
		inline void SceneEndOfLoading()   { state = UPDATE; }
		inline void SceneEndOfUpdate()    { state = CLOSING; }
		inline void SceneEndOfClosing()   { state = END; }
		
		// Scene Update Functions
		void InternalOnBegin();
		void InternalOnEnd();
        void InternalOnFixedLoading();
		void InternalOnFixedUpdate();
		void InternalOnFixedClosing();
        void InternalOnLoading();
		void InternalOnUpdate();
		void InternalOnClosing();
		    
    protected:
        // Object Hierarchy Functions
        inline void RegisterObject(SceneObject& obj) { obj.SetParent(&masterSceneObject); }
        inline void RegisterObject(SceneObject& obj, SceneObject& parent) { obj.SetParent(&parent); }
        
        // Object Finding Functions
        string RegisterReference(SceneObject& obj, string alias);
        SceneObject* FindReference(string alias) const;
        void RemoveReference(string alias);
        
        // Debugging Tool
        bool ConnectionCheck(SceneObject& obj); // return 'true' if object is connected to MasterSceneObject
		
};
        
#endif // SCENE_H
