// Class automatically generated by Dev-C++ New Class wizard

#ifndef KEYINPUTAPI_H
#define KEYINPUTAPI_H

#include <windows.h>
#include <vector>
#include "datatype.h"

using namespace std;

namespace ki {
    enum KeyType {
        // A to Z
        A = 0x41,
        B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,   // Z = 0x5A
        
        // 0 to 9
        KEY0 = 0x30,
        KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9,   // KEY9 = 0x39
        
        // Mouse Button
        LMB = VK_LBUTTON,
        RMB = VK_RBUTTON,
        MMB = VK_MBUTTON,
        
        // Arrow Key
        ARROW_UP    = VK_UP,
        ARROW_DOWN  = VK_DOWN,
        ARROW_LEFT  = VK_LEFT,
        ARROW_RIGHT = VK_RIGHT,
        
        // Numpad (Tem-key)
        NUM0   = VK_NUMPAD0,
        NUM1   = VK_NUMPAD1,
        NUM2   = VK_NUMPAD2,
        NUM3   = VK_NUMPAD3,
        NUM4   = VK_NUMPAD4,
        NUM5   = VK_NUMPAD5,
        NUM6   = VK_NUMPAD6,
        NUM7   = VK_NUMPAD7,
        NUM8   = VK_NUMPAD8,
        NUM9   = VK_NUMPAD9,
        NUMADD = VK_ADD,
        NUMSUB = VK_SUBTRACT,
        NUMMUL = VK_MULTIPLY,
        NUMDIV = VK_DIVIDE,
        NUMDEC = VK_DECIMAL,
        
        // Function
        F1  = VK_F1,
        F2  = VK_F2,
        F3  = VK_F3,
        F4  = VK_F4,
        F5  = VK_F5,
        F6  = VK_F6,
        F7  = VK_F7,
        F8  = VK_F8,
        F9  = VK_F9,
        F10 = VK_F10,
        F11 = VK_F11,
        // F12 is reserved for engine
        
        // etc
        ESC    = VK_ESCAPE,
        TAB    = VK_TAB,
        BACK   = VK_BACK,
        ENTER  = VK_RETURN,
        SPACE  = VK_SPACE,
        HANGUL = VK_HANGUL,
        INS       = VK_INSERT,
        DEL       = VK_DELETE,
        HOME      = VK_HOME,
        END       = VK_END,
        PAGE_UP   = VK_PRIOR,
        PAGE_DOWN = VK_NEXT,
        
        // Some FUCKING broken named shitty Key 
        COLON   = VK_OEM_1,
        SLASH   = VK_OEM_2,
        TILDE   = VK_OEM_3,
        BRACKET_OPEN  = VK_OEM_4,
        BACKSLASH     = VK_OEM_5,
        BRACKET_CLOSE = VK_OEM_6,
        QUOTE   = VK_OEM_7,
        COMMA   = 0xBC,
        PERIOD  = 0xBE,
        PLUS    = 0xBB,
        MINUS   = 0xBD
        
    };
    
    struct KeyState {
        bool shift, lShift, rShift;
        bool control, lControl, rControl;
        bool alt, lAlt, rAlt;
        
        KeyType key;
        bool down;
        bool pressed;
        
        KeyState(KeyType _key) : key(_key) { shift   = false; lShift   = false; rShift   = false;
                                             control = false; lControl = false; rControl = false;
                                             alt     = false; lAlt     = false; rAlt     = false; 
                                                              down     = false; pressed  = false;}
    };
    
    class KeyInputAPI {
        private:
            bool isWindowActive;
            vector<int> pressed;
            Point2D cursorPos;
            
        public:
            static KeyInputAPI& GetInstance() { 
                static KeyInputAPI instance;
                return instance;
            }
            
            inline void SetIsWindowActive(bool active) { isWindowActive = active; }
            KeyState GetKeyState(KeyType key);
            inline Point2D GetCursorPos() { return cursorPos; }
            
            // Those functions are not meant for you (for internal use)
            void UpdateKeyState();
            inline void UpdateCursorPos(Point2D cursorPos) { this->cursorPos = cursorPos; }
            
        private:
            KeyInputAPI() : isWindowActive(true) { };
    };
}


#endif // KEYINPUTAPI_H
